#include<stdio.h>
#include<omp.h>
void merge(int array[],int low,int mid,int high)
{
int temp[30];
int i,j,k,m;
j=low;
m=mid+1;
for(i=low; j<=mid && m<=high ; i++)
{
if(array[j]<=array[m])
{
temp[i]=array[j];
j++;
}
else
{
temp[i]=array[m];
m++;
}
}
if(j>mid)
{
for(k=m; k<=high; k++)
{
temp[i]=array[k];
i++;
}
}
else
{
for(k=j; k<=mid; k++)
{
temp[i]=array[k];
i++;
}
}
for(k=low; k<=high; k++)
array[k]=temp[k];
}
void mergesort(int array[],int low,int high)
{
int mid;
if(low<high)
{
mid=(low+high)/2;
#pragma omp parallel sections num_threads(2)
{
#pragma omp section
{
mergesort(array,low,mid);
}
#pragma omp section
{
mergesort(array,mid+1,high);
}
}
merge(array,low,mid,high);
}
}
int main()
{
int array[50];
int i,size;
printf("Enter total no. of elements:\n");
scanf("%d",&size);
printf("Enter %d elements:\n",size);
for(i=0; i<size; i++)
{
scanf("%d",&array[i]);
}
mergesort(array,0,size-1);
printf("Sorted Elements as follows:\n");
for(i=0; i<size; i++)
printf("%d ",array[i]);
printf("\n");
return 0;
}
----------------------------------------------------------------------------------------
****Merge sort****
-------------------
#include <iostream>
#include <vector>
#include <omp.h>
using namespace std;

void merge(vector<int>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    vector<int> L(n1);
    vector<int> R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    int i = 0;
    int j = 0;
    int k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int>& arr, int l, int r) {
    if (l >= r) return;
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
}

int main() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter " << n << " elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << "Original array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    mergeSort(arr, 0, arr.size() - 1);

    cout << "Sorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
------------------------------------------------------------------------------------
****Quick Sort****
-------------------
#include <iostream>
#include <vector>

using namespace std;

void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high]; // Choose the last element as pivot
    int i = (low - 1);     // Index of the smaller element

    for (int j = low; j <= high - 1; j++) {
        // If the current element is smaller than the pivot
        if (arr[j] < pivot) {
            i++; // Increment index of smaller element
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

void quicksort(vector<int>& arr, int low, int high) {
    if (low < high) {
        // Partitioning index
        int pi = partition(arr, low, high);

        // Separately sort elements before and after partition
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

int main() {
    int numElements;
    cout << "Enter the number of elements: ";
    cin >> numElements;

    vector<int> arr(numElements);
    cout << "Enter the elements: ";
    for (int i = 0; i < numElements; i++) {
        cin >> arr[i];
    }

    quicksort(arr, 0, numElements - 1);

    cout << "Sorted array: \n";
    for (int i = 0; i < numElements; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}

---------------------------------------------------------------------------------------
****Selection Sort****
-----------------------
#include <iostream>
#include <vector>

using namespace std;

void selectionSort(vector<int>& arr) {
    int n = arr.size();

    // Traverse through all array elements
    for (int i = 0; i < n - 1; i++) {
        // Find the minimum element in unsorted array
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }

        // Swap the found minimum element with the first element
        swap(arr[minIndex], arr[i]);
    }
}

int main() {
    int numElements;
    cout << "Enter the number of elements: ";
    cin >> numElements;

    vector<int> arr(numElements);
    cout << "Enter the elements: ";
    for (int i = 0; i < numElements; i++) {
        cin >> arr[i];
    }

    cout << "Unsorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    selectionSort(arr);

    cout << "Sorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
-----------------------------------------------------------------------------------------
Commands:
-------------

sudo apt update
sudo apt install libomp-dev
sudo yum install libgomp
---------------------------
gcc -o filename filename.cpp
filename.exe (windows)
./filename
---------------------------
for running in terminal:
pwd
cd Desktop/
touch in.cpp
g++ -o in in.cpp
./in
---------------------------
cd desktop/
touch filename.c
gcc -fopenmp filename.c -o filename
./filename
---------------------------
sudo apt install libomp-dev
---------------------------